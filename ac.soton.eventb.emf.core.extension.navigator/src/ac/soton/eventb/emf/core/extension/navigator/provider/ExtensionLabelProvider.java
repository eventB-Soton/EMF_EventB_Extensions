/*******************************************************************************
 * Copyright (c) 2011, 2014 University of Southampton.
 *
 * This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License 2.0
 * which accompanies this distribution, and is available at
 * https://www.eclipse.org/legal/epl-2.0/
 *
 * SPDX-License-Identifier: EPL-2.0
 *
 * Contributors:
 *    University of Southampton - initial API and implementation
 *******************************************************************************/
package ac.soton.eventb.emf.core.extension.navigator.provider;

import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider;
import org.eclipse.jface.viewers.ILabelProviderListener;
import org.eclipse.swt.graphics.Image;
import org.eclipse.ui.IMemento;
import org.eclipse.ui.navigator.ICommonContentExtensionSite;
import org.eclipse.ui.navigator.ICommonLabelProvider;

import ac.soton.eventb.emf.core.extension.navigator.ExtensionNavigatorPlugin;

/**
 * Event-B EMF extension label provider.
 * Provides labels and icons for the AbstractExtensions of event-b elements.
 * Copied from the label providers generated by GMF for the diagram elements.
 * 
 * @author vitaly
 *
 */
public class ExtensionLabelProvider implements ICommonLabelProvider {

	private AdapterFactoryLabelProvider myAdapterFactoryLabelProvider = new AdapterFactoryLabelProvider(
			ExtensionNavigatorPlugin.getDefault()
					.getItemProvidersAdapterFactory());

	@Override
	public Image getImage(Object element) {
		if (element instanceof ExtensionNavigatorItem) {
			return myAdapterFactoryLabelProvider
					.getImage(((ExtensionNavigatorItem) element)
							.getEObject());
		}
		return null;
	}

	@Override
	public String getText(Object element) {
		if (element instanceof ExtensionNavigatorItem) {
			return myAdapterFactoryLabelProvider
					.getText(((ExtensionNavigatorItem) element)
							.getEObject());
		}
		return null;
	}

	@Override
	public void addListener(ILabelProviderListener listener) {
		myAdapterFactoryLabelProvider.addListener(listener);
	}

	@Override
	public void dispose() {
		myAdapterFactoryLabelProvider.dispose();
	}

	@Override
	public boolean isLabelProperty(Object element, String property) {
		return myAdapterFactoryLabelProvider.isLabelProperty(element, property);
	}

	@Override
	public void removeListener(ILabelProviderListener listener) {
		myAdapterFactoryLabelProvider.removeListener(listener);
	}

	@Override
	public void restoreState(IMemento aMemento) {
		/* not implemented */
	}

	@Override
	public void saveState(IMemento aMemento) {
		/* not implemented */
	}

	@Override
	public String getDescription(Object anElement) {
		/* not implemented */
		return null;
	}

	@Override
	public void init(ICommonContentExtensionSite aConfig) {
		/* not implemented */
	}

}
